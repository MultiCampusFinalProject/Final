<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
 <mapper namespace="com.spring.mapper.CourseMapper">

 	<insert id="insertCourse" parameterType="com.spring.dto.CourseDTO" useGeneratedKeys="true" keyProperty="courseId">
 	 <selectKey keyProperty="courseId" resultType="int" order="AFTER">
    SELECT course_seq.currval FROM dual
  </selectKey>
 		INSERT INTO course (COURSE_ID, USER_ID, COURSE_NAME, COURSE_AVG_SCORE, COURSE_NUMBER,COURSE_CONTENT)
 		VALUES (course_seq.nextval, #{userId}, #{courseName}, 0, #{courseNumber}, #{courseContent})
 	</insert>
 	<select id="getAllCourses"  resultType="com.spring.dto.CourseInformDTO">
SELECT
  c.course_id AS courseId,
  c.user_id AS userId,
  c.course_name AS courseName,
  c.course_avg_score AS courseAvgScore,
  c.course_number AS courseNumber,
  c.course_content AS courseContent,
  LISTAGG(cp.place_id, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseIdList,
  LISTAGG(pl.place_name, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseList
FROM
  Course c
JOIN
  Course_place cp ON c.course_id = cp.course_id
JOIN
  place pl ON cp.place_id = pl.place_id
GROUP BY
  c.course_id,
  c.user_id,
  c.course_name,
  c.course_content,
  c.course_avg_score,
  c.course_number
 	</select>
 		<select id="getCourseInformByCourseId" parameterType="_int"  resultType="com.spring.dto.CourseInformDTO">
SELECT
  c.course_id AS courseId,
  c.user_id AS userId,
  c.course_name AS courseName,
  c.course_avg_score AS courseAvgScore,
  c.course_number AS courseNumber,
  c.course_content AS courseContent,
  LISTAGG(cp.place_id, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseIdList,
  LISTAGG(pl.place_name, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseList
FROM
  Course c
JOIN
  Course_place cp ON c.course_id = cp.course_id
JOIN
  place pl ON cp.place_id = pl.place_id
WHERE
	course_id = #{courseId}
GROUP BY
  c.course_id,
  c.user_id,
  c.course_name,
  c.course_content,
  c.course_avg_score,
  c.course_number
 	</select>
 	<select id="getCourseById" parameterType="_int" resultType="com.spring.dto.CourseDTO">
 	
 	SELECT
  course_id AS courseId,
  user_id AS userId,
  course_name AS courseName,
  course_content AS courseContent,
  course_avg_score AS courseAvgScore,
  course_number AS courseNumber
FROM
  COURSE 
WHERE
course_id = #{courseId}
 	
 	
 	</select>
 	 	<select id="getCourseBySearchKeyword" parameterType="com.spring.dto.SearchKeyword" resultType="com.spring.dto.CourseInformDTO">
SELECT
  c.course_id AS courseId,
  c.user_id AS userId,
  c.course_name AS courseName,
  c.course_avg_score AS courseAvgScore,
  c.course_number AS courseNumber,
  c.course_content AS courseContent,
  LISTAGG(cp.place_id, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseIdList,
  LISTAGG(pl.place_name, ',') WITHIN GROUP (ORDER BY cp.place_id) AS courseList
FROM
  Course c
JOIN
  Course_place cp ON c.course_id = cp.course_id
JOIN
  place pl ON cp.place_id = pl.place_id
GROUP BY
  c.course_id,
  c.user_id,
  c.course_name,
  c.course_content,
  c.course_avg_score,
  c.course_number
  <trim prefix="WHERE" prefixOverrides="AND |OR">
							<if test="keyword != null and keyword !=''">
								 	AND content LIKE '%'||#{keyword}||'%'
								</if>
							</trim>
 	</select>
 	<!-- pagination 이 적용된 쿼리문 -->
<select id="getCourseWithPageRequest" parameterType="com.spring.dto.PageRequestDTO" resultType="com.spring.dto.CourseInformDTO">
  SELECT
    Course.course_id AS courseId,
    Course.user_id AS userId,
    Course.course_name AS courseName,
    Course.course_avg_score AS courseAvgScore,
    Course.course_number AS courseNumber,
    Course.course_content AS courseContent,
    Course.courseIdList AS courseIdList,
    Course.courseList AS courseList
    
    
  FROM
    (
      SELECT
        c.course_id,
        c.user_id,
        c.course_name,
        c.course_avg_score,
        c.course_number,
        c.course_content,
        LISTAGG(Course_place.place_id, ',') WITHIN GROUP (ORDER BY Course_place.place_id) AS courseIdList,
        LISTAGG(place.place_name, ',') WITHIN GROUP (ORDER BY Course_place.place_id) AS courseList,
      	ROW_NUMBER() OVER (ORDER BY c.course_id) AS rn
      FROM
        Course c
      JOIN
        Course_place ON c.course_id = Course_place.course_id
      JOIN
        place ON Course_place.place_id = place.place_id
   JOIN
        area_place ON place.place_id = area_place.place_id
      JOIN
        area ON area_place.area_id = area.area_id
      <trim prefix="WHERE" prefixOverrides="AND |OR">
        <if test="keyword != null and keyword !=''">
          AND (c.course_content LIKE '%'||#{keyword}||'%'
          OR place.place_name LIKE '%'||#{keyword}||'%' 
          OR area.area_name LIKE '%'||#{keyword}||'%' )
          
          
        </if>
      </trim>
      GROUP BY
        c.course_id,
        c.user_id,
        c.course_name,
        c.course_avg_score,
        c.course_number,
        c.course_content
    ) Course

  WHERE
 <![CDATA[   rn <= #{pageNum} * #{amount} AND rn > (#{pageNum} - 1) *  #{amount} 	]]>
</select>



 	
 	
 <select id="getTotalCount" parameterType="com.spring.dto.PageRequestDTO" resultType="java.lang.Integer">
  SELECT COUNT(DISTINCT c.course_id) AS totalCount
  FROM Course c
  JOIN Course_place ON c.course_id = Course_place.course_id
  JOIN place ON Course_place.place_id = place.place_id
  JOIN area_place ON place.place_id = area_place.place_id
  JOIN area ON area_place.area_id = area.area_id
  <trim prefix="WHERE" prefixOverrides="AND |OR">
    <if test="keyword != null and keyword !=''">
      AND (c.course_content LIKE '%'||#{keyword}||'%'
      OR place.place_name LIKE '%'||#{keyword}||'%'
      OR area.area_name LIKE '%'||#{keyword}||'%')
    </if>
  </trim>
</select>

 </mapper>